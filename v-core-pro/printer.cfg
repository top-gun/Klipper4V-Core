# v-core pro SKR Pro 1.2
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: PE9
dir_pin: PF1
enable_pin: !PF2
rotation_distance: 40
microsteps: 16
#step_distance: 0.0125
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -12
position_endstop: -12
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 300
homing_speed: 50
homing_retract_dist: 0

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: PE11
dir_pin: PE8
enable_pin: !PD7
rotation_distance: 40
microsteps: 16
#step_distance: 0.0125
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: -5
position_min: -12
position_max: 300
homing_speed: 50
homing_retract_dist: 0

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: PE13
dir_pin: !PC2
enable_pin: !PC0
rotation_distance: 8
microsteps: 16
endstop_pin: probe:z_virtual_endstop
#endstop_pin: ^ar38
#position_endstop: 0.5
position_min: -1 # The Z carriage may need to travel below the Z=0
                 # homing point if the bed has a significant tilt.
position_max: 360
homing_speed: 10

[stepper_z1]
step_pin: PD15
dir_pin: !PE7
enable_pin: !PA3
rotation_distance: 8
microsteps: 16

[stepper_z2]
step_pin: PD13
dir_pin: !PG9
enable_pin: !PF0
rotation_distance: 8
microsteps: 16

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: PE14
dir_pin: !PA0
enable_pin: !PC3
microsteps: 16
rotation_distance: 7.68
full_steps_per_rotation: 400
# 400 for a 0.9° pancake. A 1.8° stepper is 200
nozzle_diameter: 0.4
filament_diameter: 1.750
max_extrude_cross_section: 0.64
max_extrude_only_distance: 500
max_extrude_only_velocity:2000
#max_extrude_only_accel:350

# The remaining variables describe the extruder heater.
heater_pin: PB1
sensor_type: ATC Semitec 104GT-2
# some clone hotends come with a thermistor type: NTC 100K beta 3950
# 104GT-2 usually have a yellow shrink tube
# 3950 usually have a black shrink tube

sensor_pin: PF4
min_extrude_temp: 170
min_temp: 0
max_temp: 285

control: pid

pid_kp = 28.413
pid_ki = 1.334
pid_kd = 151.300

#pressure_advance: 0.05
# this should be calibrated with a tuning tower, don't just assume a PA value. PA depends on extruder, hotend, nozzle, filament and temperature
#pressure_advance_smooth_time: 0.040

[heater_bed]
heater_pin: PD12
sensor_pin: PF3
sensor_type: NTC 100K beta 3950
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 120

# Print cooling fan (omit section if fan not present).
[fan]
pin: PC8

[heater_fan toolhead_cooling_fan]
pin: PE5
fan_speed: 0.7

# Micro-controller information.
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_500043000A5052504B313720-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 250000

# The printer section controls high level printer settings.
[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000
max_accel_to_decel: 1500
max_z_velocity: 15
max_z_accel: 20
square_corner_velocity: 5
#buffer_time_high: 2

[input_shaper]

######################################################################
# Bed probing hardware
######################################################################

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.
#[probe]
#pin: ^PA2
#x_offset: -29
#y_offset: -13.5
#z_offset: 0.66

#speed: 5
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
#samples: 3
#   The number of times to probe each point. The probed z-values will
#   be averaged. The default is to probe 1 time.
#sample_retract_dist: 2
#   The distance (in mm) to lift the toolhead between each sample (if
#   sampling more than once). The default is 2mm.
#lift_speed: 5.0
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples. The default is to use the same value as the 'speed'
#   parameter.
#samples_result: median
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
#samples_tolerance: 0.02
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. If this tolerance is exceeded then either an error is
#   reported or the attempt is restarted (see
#   samples_tolerance_retries). The default is 0.100mm.
#samples_tolerance_retries: 5
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. On a retry, all current samples are discarded
#   and the probe attempt is restarted. If a valid set of samples are
#   not obtained in the given number of retries then an error is
#   reported. The default is zero which causes an error to be reported
#   on the first sample that exceeds samples_tolerance.
#activate_gcode:
#   A list of G-Code commands to execute prior to each probe attempt.
#   See docs/Command_Templates.md for G-Code format. This may be
#   useful if the probe needs to be activated in some way. Do not
#   issue any commands here that move the toolhead (eg, G1). The
#   default is to not run any special G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands to execute after each probe attempt
#   completes. See docs/Command_Templates.md for G-Code format. Do not
#   issue any commands here that move the toolhead. The default is to
#   not run any special G-Code commands on deactivation.

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.


[bltouch]
sensor_pin: ^PA2
control_pin: PA1
pin_move_time: 0.675

sample_retract_dist: 10

pin_up_reports_not_triggered: True
pin_up_touch_mode_reports_triggered: True
x_offset: -34
y_offset: -5
z_offset: 0.0
# needs to be adjusted!!!
speed: 7
#   See the "probe" section for information on these parameters.

# Mesh Bed Leveling. One may define a [bed_mesh] config section
# to enable move transformations that offset the z axis based
# on a mesh generated from probed points. Note that bed_mesh
# and bed_tilt are incompatible, both cannot be defined.  When
# using a probe to home the z-axis, it is recommended to define
# a [homing_override] section in printer.cfg to home toward the
# center of the print area.
#

[bed_mesh]
speed: 180

horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
mesh_min: 20,20
#   Defines the minimum x,y coodinate of the mesh for rectangular beds.  This
#   coordinate is relative to the probe's location. This will be the first
#   point probed, nearest to the origin. This parameter must be provided for
#   rectangular beds.
mesh_max:265,260
#   Defines the maximum x,y coordinate of the mesh for rectangular beds.
#   Adheres to the same principle as mesh_min, however this will be the
#   furthest point probed from the bed's origin. This parameter must be
#   provided for rectangular beds.
probe_count: 7,7
#   For rectangular beds, this is a comma separate pair of integer
#   values (X,Y) defining the number of points to probe along each axis.
#   A single value is also valid, in which case that value will be applied
#   to both axes.  Default is 3,3.
fade_start: 1.0
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled.  Default is 1.0.
fade_end: 20.0
#   The gcode z position in which phasing out completes.  When set
#   to a value below fade_start, fade is disabled. It should be
#   noted that fade may add unwanted scaling along the z-axis of a
#   print.  If a user wishes to enable fade, a value of 10.0 is
#   recommended. Default is 0.0, which disables fade.
#fade_target:
#   The z position in which fade should converge. When this value is set
#   to a non-zero value it must be within the range of z-values in the mesh.
#   Users that wish to converge to the z homing position should set this to 0.
#   Default is the average z value of the mesh.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will
#   trigger a split. Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point. The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
algorithm: bicubic
#
bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.
#relative_reference_index:
#   A point index in the mesh to reference all z values to. Enabling
#   this parameter produces a mesh relative to the probed z position
#   at the provided index.

[skew_correction]
# data is in the slicer start code!

# Multiple Z stepper tilt adjustment. This feature enables independent
# adjustment of multiple z steppers (see stepper_z1 section below) to
# adjust for tilt. If this section is present then a Z_TILT_ADJUST
# extended G-Code command becomes available.
[z_tilt]
z_positions:
	0,0
	150,300
	300,0
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the XY position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z, the second to stepper_z1,
#   the third to stepper_z2, etc. This parameter must be provided.
points:
	60,60
	185,270
	260,60
		
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates. This parameter must be
#   provided.
speed: 120
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 12
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
retries: 10
#   Number of times to retry if the probed points aren't within tolerance
retry_tolerance: 0.02
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance. Note the smallest unit of
#   change here would be a single step. However if you are probing
#   more points than steppers then you will likely have a fixed
#   minimum value for the range of probed points which you can learn
#   by observing command output.

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None
#axes_map: x,z,y

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    150,150,20  


# Controller cooling fan (one may define any number of sections with a
# "controller_fan" prefix). A "controller fan" is a fan that will be
# enabled whenever its associated heater or any configured stepper
# driver is active. The fan will stop, whenever an idle_timeout is
# reached to ensure no overheating will occur after deactivating a
# watched component.
[controller_fan controller_fan]
pin:  PE6
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
#idle_speed:
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and before
#   the idle_timeout is reached. This must be greater or equal
#   max_power. The default is max_power

# Temperature-triggered cooling fans (one may define any number of
# sections with a "temperature_fan" prefix). A "temperature fan" is a
# fan that will be enabled whenever its associated sensor is above a
# set temperature. By default, a temperature_fan has a shutdown_speed
# equal to max_power.
#[temperature_fan my_temp_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: analog13
#   See the "heater" section for details about the sensor_type and
#   sensor_pin parameters.
#min_temp: 0
#max_temp: 100
#   The maximum range of valid temperatures (in Celsius) that the
#   sensor must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. Set this range just wide enough so
#   that reasonable temperatures do not result in an error. These
#   parameters must be provided.
#target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#control: watermark
#   Control algorithm (either watermark or pid). This parameter must
#   be provided.
#pid_Kp: 40
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID temperature fans.
#pid_Ki: 0.2
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID temperature fans.
#pid_Kd: 0.1
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID temperature fans.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which the derivative in the pid
#   will be smoothed to reduce the impact of measurement noise. The
#   default is 2 seconds.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.

# Support for gcode arc (G2/G3) commands.
[gcode_arcs]
resolution: 1.0

[tmc2209 stepper_x]
uart_pin: PC13
run_current: 1.2
hold_current: 0.500
stealthchop_threshold: 250
diag_pin: PB10
driver_SGTHRS: 70

[tmc2209 stepper_y]
uart_pin: PE3
run_current: 1.2
hold_current: 0.500
stealthchop_threshold: 250
diag_pin: PE12
driver_SGTHRS: 70

[tmc2209 stepper_z]
uart_pin: PE1
run_current: 1.0
hold_current: 0.500
stealthchop_threshold: 50

[tmc2209 extruder]
uart_pin: PD4
run_current: 0.5
hold_current: 0.400
stealthchop_threshold: 100

[tmc2209 stepper_z1]
uart_pin: PD1
run_current: 1.3
hold_current: 0.500
stealthchop_threshold: 50

[tmc2209 stepper_z2]
uart_pin: PD6
run_current: 1.0
hold_current: 0.500
stealthchop_threshold: 50

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_X: 30    # edit to your preferred park position
default_parameter_Y: 0    # edit to your preferred park position
default_parameter_Z: 100   # edit to your preferred park position
default_parameter_E: 0.6      # edit to your preferred retract length
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
default_parameter_E: 0.6      # edit to your preferred retract length
gcode:
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    G1 E-1 F1800
    G90
    G1 Z50 F1200
    G91
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    

# Homing override. One may use this mechanism to run a series of
# g-code commands in place of a G28 found in the normal g-code input.
# This may be useful on printers that require a specific procedure to
# home the machine.
[homing_override]
set_position_z: 5
gcode:
	G90   ; Uncomment these 2 lines to blindly lift the Z 2mm at start
    G0 Z20 F500

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.5 HOLDCURRENT=0.5
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.5 HOLDCURRENT=0.5
    G28 X
    G1 X5 F1200

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.4 HOLDCURRENT=0.4
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.4 HOLDCURRENT=0.4
    G28 Y
 
   SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.3 HOLDCURRENT=0.5
   SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.3 HOLDCURRENT=0.5
	G0 X150 Y150 F3000
	G28 Z
	G0 Z100 F600
    
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of G28 commands found in the normal
#   g-code input. If a G28 is contained in this list of commands then
#   it will invoke the normal homing procedure for the printer. The
#   commands listed here must home all axes. This parameter must be
#   provided.
#axes: xyz
#   The axes to override. For example, if this is set to "z" then the
#   override script will only be run when the z axis is homed (eg, via
#   a "G28" or "G28 Z0" command). Note, the override script should
#   still home all axes. The default is "xyz" which causes the
#   override script to be run in place of all G28 commands.
#set_position_x:
#set_position_y:
#set_position_z:
#   If specified, the printer will assume the axis is at the specified
#   position prior to running the above g-code commands. Setting this
#   disables homing checks for that axis. This may be useful if the
#   head must move prior to invoking the normal G28 mechanism for an
#   axis. The default is to not force a position for an axis.


# Support manually moving stepper motors for diagnostic purposes.
# Note, using this feature may place the printer in an invalid state -
# see docs/G-Codes.md for important details.
[force_move]
enable_force_move: true
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.


######################################################################
# Optional G-Code features
######################################################################


[gcode_macro G34]
gcode:
    # Home the extruder and bed
    G28
    # Trim the bed
    Z_Tilt_Adjust
    G1 X150 Y150 Z100 F1800

[gcode_macro UP]
gcode:
    # Raise the nozzle 0.02mm from the bed
    SET_GCODE_OFFSET Z_ADJUST=0.02

[gcode_macro DOWN]
gcode:
    # Raise the nozzle 0.02mm from the bed
    SET_GCODE_OFFSET Z_ADJUST=-0.02

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PG4, EXP1_3=PD11, EXP1_5=PG2, EXP1_7=PG6, EXP1_9=<GND>,
    EXP1_2=PA8, EXP1_4=PD10, EXP1_6=PG3, EXP1_8=PG7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB14, EXP2_3=PG10, EXP2_5=PF11, EXP2_7=PF12,  EXP2_9=<GND>,
    EXP2_2=PB13, EXP2_4=PB12, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=PF13
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi2"

######################################################################
# Display support
######################################################################

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[output_pin beeper]
pin: EXP1_1


# G-Code macros (one may define any number of sections with a
# "gcode_macro" prefix).
#[gcode_macro my_cmd]
#gcode:
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of "my_cmd". This parameter is
#   evaluated using Python "string format syntax" with the command
#   parameters as named arguments. For example, if one were to define
#   a macro MY_DELAY with gcode "G4 P{DELAY}" then the command
#   "MY_DELAY DELAY=100" would evaluate to "G4 P100". This parameter
#   must be provided.
#default_parameter_<parameter>:
#   One may define any number of options with a "default_parameter_"
#   prefix. Use this to define default values for g-code parameters.
#   For example, if one were to define the macro MY_DELAY with gcode
#   "G4 P{DELAY}" along with "default_parameter_DELAY = 50" then the
#   command "MY_DELAY" would evaluate to "G4 P50". The default is to
#   require that all parameters used in the gcode script be present in
#   the command invoking the macro.


# Enable the "M118" and "RESPOND" extended commands.
# [respond]
# default_type: echo
#    Sets the default prefix of the "M118" and "RESPOND" output to one of
#    the following:
#        echo: "echo: " (This is the default)
#        command: "// "
#        error: "!! "
# default_prefix: echo:
#    Directly sets the default prefix. If present, this value will override
#    the "default_type".
